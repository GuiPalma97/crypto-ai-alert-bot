import os
import asyncio
import logging
import matplotlib.pyplot as plt
import pandas as pd
import ta
from ta.momentum import RSIIndicator
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters
from kucoin.client import Market
from datetime import datetime

# Configura√ß√µes iniciais
TOKEN = os.getenv("TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
CRIPTO_LISTA = ['BTC-USDT', 'ETH-USDT', 'SOL-USDT', 'AAVE-USDT']
INTERVALO = '1hour'
analise_ativa = False

logging.basicConfig(level=logging.INFO)

client = Market()

# Fun√ß√£o para obter dados da KuCoin
from kucoin.client import Market

# --- Inicializar o cliente de mercado KuCoin ---
kucoin_client = Market()

# --- Coletar dados com o SDK da KuCoin ---
def obter_dados_kucoin(par, intervalo='1hour'):
    intervalo_map = {
        '1min': '1min',
        '5min': '5min',
        '1hour': '1hour',
        '1day': '1day',
        '1week': '1week',
    }

    if intervalo not in intervalo_map:
        intervalo = '1hour'

    try:
        candles = kucoin_client.get_kline(symbol=par, kline_type=intervalo_map[intervalo])

        if not candles:
            print(f"Nenhum dado de candle retornado para {par}")
            return None

        df = pd.DataFrame(candles, columns=['timestamp', 'open', 'close', 'high', 'low', 'volume', 'turnover'])
        df = df.sort_values('timestamp')
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='s')
        df.set_index('timestamp', inplace=True)
        df = df.astype(float)

        df['RSI'] = RSIIndicator(df['close']).rsi()
        bb = BollingerBands(close=df['close'])
        df['Upper'] = bb.bollinger_hband()
        df['Lower'] = bb.bollinger_lband()

        return df.dropna()

    except Exception as e:
        print(f"Erro ao obter dados da KuCoin para {par}: {e}")
        return None
# Fun√ß√£o para gerar gr√°fico e RSI
def gerar_grafico(df, par):
    rsi = RSIIndicator(df["close"])
    df["RSI"] = rsi.rsi()

    plt.figure(figsize=(10, 6))
    plt.subplot(2, 1, 1)
    plt.plot(df["close"], label="Pre√ßo")
    plt.title(f"{par} Pre√ßo")
    plt.grid()

    plt.subplot(2, 1, 2)
    plt.plot(df["RSI"], label="RSI", color="orange")
    plt.axhline(70, color='red', linestyle='--')
    plt.axhline(30, color='green', linestyle='--')
    plt.title("RSI")
    plt.grid()

    plt.tight_layout()
    filepath = f"{par.replace('-', '')}.png"
    plt.savefig(filepath)
    plt.close()
    return filepath, df["RSI"].iloc[-1]

# Envia an√°lises
async def analisar_todas(bot):
    for par in CRIPTO_LISTA:
        df = obter_dados_kucoin(par, '1hour')
        if df is not None and not df.empty:
            imagem, rsi = gerar_grafico(df, par)

            # An√°lise semanal para sugest√£o IA
            df_semanal = obter_dados_kucoin(par, '1week')
            if df_semanal is not None and not df_semanal.empty:
                rsi_sem = RSIIndicator(df_semanal['close']).rsi().iloc[-1]
                sugestao = (
                    "ü§ñ SUGEST√ÉO IA: üü¢ COMPRAR (RSI semanal baixo)" if rsi_sem < 30 else
                    "ü§ñ SUGEST√ÉO IA: üî¥ VENDER (RSI semanal alto)" if rsi_sem > 70 else
                    "ü§ñ SUGEST√ÉO IA: ‚ö™ MANTER (RSI semanal neutro)"
                )
            else:
                sugestao = "ü§ñ SUGEST√ÉO IA: RSI semanal indispon√≠vel"

            mensagem = f"üìä An√°lise {par}\nRSI: {rsi:.2f}\n{sugestao}"
            await bot.send_photo(chat_id=os.getenv("TELEGRAM_CHAT_ID"), photo=open(imagem, "rb"), caption=mensagem)

# Loop de an√°lise autom√°tica
async def loop_analise(application):
    global analise_ativa
    while True:
        if analise_ativa:
            await analisar_todas(application.bot)
        await asyncio.sleep(3600)  # 1 hora

# Comando /start
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("ü§ñ Bot de An√°lise de Criptomoedas Ativado. Use /menu para ver op√ß√µes.")

# Comando /menu
async def menu(update: Update, context: CallbackContext):
    botoes = [
        [InlineKeyboardButton("‚úÖ Iniciar An√°lises", callback_data='start')],
        [InlineKeyboardButton("üõë Parar An√°lises", callback_data='stop')],
        [InlineKeyboardButton("üìä An√°lise Agora", callback_data='agora')],
        [InlineKeyboardButton("‚ûï Adicionar Cripto", callback_data='add')],
        [InlineKeyboardButton("‚ûñ Remover Cripto", callback_data='remove')],
    ]
    await update.message.reply_text("üìç Menu de Comandos:", reply_markup=InlineKeyboardMarkup(botoes))

# Callback interativo
def callback_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    if query.data == 'start':
        global analise_ativa
        analise_ativa = True
        query.edit_message_text("‚úÖ An√°lises ativadas.")
    elif query.data == 'stop':
        analise_ativa = False
        query.edit_message_text("üõë An√°lises pausadas.")
    elif query.data == 'agora':
        query.edit_message_text("‚è≥ Gerando an√°lise...")
        asyncio.create_task(analisar_todas(context.bot))
    elif query.data == 'add':
        context.bot.send_message(chat_id=query.message.chat_id, text="Digite o s√≠mbolo da cripto para adicionar (ex: XRP-USDT):")
        context.user_data['modo'] = 'adicionar'
    elif query.data == 'remove':
        context.bot.send_message(chat_id=query.message.chat_id, text="Digite o s√≠mbolo da cripto para remover (ex: ETH-USDT):")
        context.user_data['modo'] = 'remover'

# Texto ap√≥s /add ou /remove
def mensagem_texto(update: Update, context: CallbackContext):
    texto = update.message.text.upper()
    if 'modo' in context.user_data:
        if context.user_data['modo'] == 'adicionar':
            if texto not in CRIPTO_LISTA:
                CRIPTO_LISTA.append(texto)
                update.message.reply_text(f"‚úÖ {texto} adicionado √† lista.")
            else:
                update.message.reply_text(f"‚ö†Ô∏è {texto} j√° est√° na lista.")
        elif context.user_data['modo'] == 'remover':
            if texto in CRIPTO_LISTA:
                CRIPTO_LISTA.remove(texto)
                update.message.reply_text(f"‚ùå {texto} removido da lista.")
            else:
                update.message.reply_text(f"‚ö†Ô∏è {texto} n√£o encontrado na lista.")
        del context.user_data['modo']
    else:
        update.message.reply_text("‚ùì Comando n√£o reconhecido. Use /menu.")

# Inicializa√ß√£o
if __name__ == '__main__':
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, mensagem_texto))

    app.create_task(loop_analise(app))
    app.run_polling()
